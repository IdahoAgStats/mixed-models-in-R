# Strip Plot Design


```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

In strip plot design each block or replication is divided into number of vertical and horizontal strips depending on the levels of the respective factors.
 1. Vertical strip plot for the first factor – vertical factor 
 2. Horizontal strip plot for the second factor – horizontal factor 


Divide the experimental area into a horizontal strips and b vertical strips.  Each level of , factor E is assigned to all the plots in one row, and each level of column.
Each level of factor A is assigned to all the plots in one row, and each level of factor B is assigned to all the plots in one column.


The statistical model:

::: panel-tabset
### lme4
```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance); library(ggplot2)
library(broom.mixed)
```
### nlme

```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr); library(ggplot2); library(broom.mixed)
```
:::

## Example Analysis

A strip-plot experiment with three reps, variety as the horizontal strip and nitrogen fertilizer as the vertical strip.
```{r}
data1 <- agridat::gomez.stripplot
```

In this design, nitrogen rates were applied in a vertical strip and different varieties (Gen) were planted in a horizontal strips and were replicated over 3 times. 
```{r, echo=FALSE}
library(desplot)
desplot(data1, gen ~ col*row,
        # aspect unknown
        out1=rep, out2=nitro, num=nitro, cex=1,
        main="Strip Plot Design")
```


### Data integrity checks

```{r}
str(data1)
```


```{r}
data1$nitro <- as.factor(data1$nitro)
```


```{r}
table(data1$col, data1$row, data1$rep)

table(data1$col, data1$nitro, data1$rep)
```

### Model Building

::: panel-tabset
#### lme4

```{r}
model_lmer <- lmer(yield ~  nitro*gen + 
                  (1|rep) + (1|row) + (1|col), 
                   data = data1)


model_lmer1 <- lmer(yield ~  nitro*gen + 
                   (1|rep:row) + (1|rep:col), 
                   data = data1)

model_lmer2 <- lmer(yield ~  nitro*gen + 
                   (1|rep:gen) + (1|rep:nitro), 
                   data = data1)


anova(model_lmer1, model_lmer2)



tidy(model_lmer1)
```

#### nlme

```{r}
model_lme <-lme(yield ~  nitro*gen,
                 random = list (~1|rep, ~1|row, ~1|col), 
             data = data1)

model_lme1 <-lme(yield ~  nitro*gen,
                 random = list(~1|row, ~1|col), 
             data = data1)

anova(model_lme, model_lme1)

tidy(model_lme)
```
:::


#### Check Model Assumptions



::: panel-tabset
#### lme4

```{r, fig.height=3}
check_model(model_lmer1, check = c('normality', 'linearity'))
```

#### nlme

```{r, fig.height=3}
check_model(model_lme, check = c('normality', 'linearity'))
```
:::

The residuals fit the assumptions of the model well.

#### Inference

We can evaluate the model for the analysis of variance, for main and interaction effects.

::: panel-tabset
### lme4

```{r}
car::Anova(model_lmer1, type = "III", test.statistics = "F")
```

### nlme

```{r}
anova(model_lme, type = "marginal")
```
:::


estimate marginal means 

::: panel-tabset
### lme4

```{r}
emm1 <- emmeans(model_lmer1, ~ nitro*gen) 
emm1
```

### nlme

```{r}
emm1 <- emmeans(model_lme, ~ nitro*gen) 
emm1
```
:::
