# Strip Plot Design


```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

In strip plot design each block or replication is divided into number of vertical and horizontal strips depending on the levels of the respective factors.
 1. Vertical strip plot for the first factor – vertical factor 
 2. Horizontal strip plot for the second factor – horizontal factor 


Divide the experimental area into 'A' horizontal strips and 'B' vertical strips. Each level of factor A is assigned to all the plots in one row, and each level of factor B is assigned to all the plots in one column. 


The statistical model:

::: panel-tabset
### lme4
```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance); library(ggplot2)
library(broom.mixed)
```
### nlme

```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr); library(ggplot2); library(broom.mixed)
```
:::

## Example Analysis

The example used here is comprised of 3 nitrogen fertilizer levels and 6 varieties applied in a strip-plot design. The nitrogen rates were applied in a vertical strip and different varieties (Gen) were planted in a horizontal strips and they were replicated over 3 times.
For the sake of analysis, 'row' and 'col' variables are used to represent 'nitrogen' and 'Gen' factors.


A strip-plot experiment with three reps, variety as the horizontal strip and nitrogen fertilizer as the vertical strip.
```{r}
data1 <- agridat::gomez.stripplot
```

 
```{r, echo=FALSE}
library(desplot)
desplot(data1, gen ~ col*row,
        # aspect unknown
        out1=rep, out2=nitro, num=nitro, cex=1,
        main="Strip Plot Design")
```


### Data integrity checks

```{r}
str(data1)
```


```{r}
data1$nitro <- as.factor(data1$nitro)
```


```{r}
table(data1$col, data1$row, data1$rep)
```


### Model Building

::: panel-tabset
#### lme4

```{r}
model_lmer <- lmer(yield ~  nitro*gen +  (1|rep) + 
                   (1|rep:row) + (1|rep:col), 
                   data = data1)

tidy(model_lmer)
```
#### nlme

```{r}

model_lme <-lme(yield ~  nitro*gen,
                random = list(one = pdBlocked(list(
        pdIdent(~ 0 + rep), 
         pdIdent(~ 0 + rep:row), 
        pdIdent(~ 0 + rep:col)))),
        data = data1 %>% mutate(one = factor(1)))
summary(model_lme)
#tidy(model_lme)
```
:::


#### Check Model Assumptions



::: panel-tabset
#### lme4

```{r, fig.height=3}
check_model(model_lmer, check = c('normality', 'linearity'))
```

#### nlme

```{r, layout="[[1,1], [1]]"}
plot(model_lme, resid(., scaled=TRUE) ~ fitted(.), 
     xlab = "fitted values", ylab = "studentized residuals")

qqnorm(residuals(model_lme))
qqline(residuals(model_lme))
```
:::

The residuals fit the assumptions of the model well.

#### Inference

We can evaluate the model for the analysis of variance, for main and interaction effects.

::: panel-tabset
### lme4

```{r}
car::Anova(model_lmer, type = "III", test.statistics = "F")
```

### nlme

```{r}
anova(model_lme, type = "marginal")
```
:::


estimate marginal means 

::: panel-tabset
### lme4

```{r}
emm1 <- emmeans(model_lmer, ~ nitro*gen) 
emm1
```

### nlme

```{r}
emm1 <- emmeans(model_lme, ~ nitro)
emm1
```
:::
