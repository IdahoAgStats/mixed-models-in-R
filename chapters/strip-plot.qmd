# Strip Plot Design

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

Also referred by 'strip-plot design' or 'strip-split-plot design'. This design had an extensive application in the agricultural sciences. In the simplest case, we have two factors A and B. Factor A is applied to whole plots same as in the standard split-plot design. Then factor B is applied to **strips** (which are just another set of whole plots) that are orthogonal to the original whole plots used for factor A.  


The statistical model for this design is:

$$y_{ijk} = \mu + \tau_i + \alpha_j + (\tau\alpha)_{ij} + \beta_k + (\tau\beta)_{ik} + (\alpha\beta)_{jk} +  \epsilon_{ijk}$$ 
Where:

$\mu$= overall experimental mean, 
$(\tau\alpha)_{ij}$, $(\tau\beta)_{ik}$, and $\epsilon_{ijk}$ are the errors used to test factor A, B, and their interaction AB, respectively. 
$\alpha$ and $\beta$ are the main effects applied A and B, and $\alpha_j\beta_k$ represents the interaction between main factors. 

$$ \epsilon_{ijk} \sim N(0, \sigma^2)$$\


## Example Analysis

We will start the analysis first by loading the required libraries for this analysis for `lmer()` and `lme()` models, respectively.

::: panel-tabset
### lme4
```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance); library(desplot)
library(broom.mixed)
```

### nlme
```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr); library(desplot); library(broom.mixed)
```
:::

For this example, we will use Rice strip-plot experiment data from the **agridat** package. This data contains a strip-plot experiment with three reps, variety as the whole plot and nitrogen fertilizer as the whole plot applied in the strips.

```{r, eval=FALSE, echo=FALSE}
#save data from the package
rice_stripplot <- agridat::gomez.stripplot
write.csv(rice_stripplot, here::here("data", "rice_stripplot.csv"), row.names = FALSE)
```

```{r}
rice <- read.csv(here::here("data", "rice_stripplot.csv"))
```

|       |                              |
|-------|------------------------------|
| rep   | replication unit             |
| nitro | nitrogen fertilizer in kg/ha |
| gen   | rice variety                 |
| row   | row (represents gen)         |
| col   | column (represents nitro)    |
| yield | grain yield in kg/ha         |

: Table of variables in the data set {tbl-strip_plot}

For the sake of analysis, 'row' and 'col' variables are used to represent 'nitrogen' and 'Gen' factors. The plot below shows the application of treatments in horizontal and vertical direction in a strip plot design.

```{r, echo=FALSE}
desplot(rice, gen ~ col*row,
        # aspect unknown
        out1=rep, out2=nitro, num=nitro, cex=1,
        main="Strip Plot Design")
```

### Data integrity checks
- Check structure of the data

The 'rep', 'nitro', and 'gen' variables in the data needs to be a factor/character variables and 'yield' should be numeric.

```{r}
str(rice)
```

Let's convert 'nitro' from numeric to factor.

```{r}
rice$nitro <- as.factor(rice$nitro)
```
- Inspect the independent variables

Let's running a a cross tabulation of independent variables to look at the balance of treatment factors.

```{r}
table(rice$gen, rice$nitro)
```

It looks balanced with 3 number of observations for each variety and nitrogen level.

- Check the extent of missing data

Next step is to identify if there are any missing observations in the data set.

```{r}
colSums(is.na(rice))
```

We don't have any missing values in this data set.

- Inspect the dependent variable

Let's check the distribution of dependent variable by plotting a histogram.

```{r, eval=FALSE}
hist(rice$yield, main = NA, xlab = "yield")
```

```{r, echo=FALSE}
#| label: fig-strip_plot_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(rice$yield, main = NA, xlab = "yield", cex.lab = cex_lab, cex.axis = cex_axis, col = base_plot_color)
```

No extreme values or skewness is present in the yield values.

### Model Building

The goal of this analysis is to evaluate the impact of nitrogen, genotype, and their interaction on rice yield. The variables "rep", "gen" (nested in rep), and "nitro" (nested in rep) were random effects in the model. 

::: panel-tabset
#### lme4
```{r}
model_lmer <- lmer(yield ~  nitro*gen +  (1|rep) + 
                   (1|rep:gen) + (1|rep:nitro), 
                   data = rice)
tidy(model_lmer)
```

#### nlme
```{r}
model_lme <-lme(yield ~  nitro*gen,
                random = list(one = pdBlocked(list(
        pdIdent(~ 0 + rep), 
         pdIdent(~ 0 + rep:gen), 
        pdIdent(~ 0 + rep:nitro)))),
        data = rice %>% mutate(one = factor(1)))

summary(model_lme)
```
:::

:::: {.column-margin}
::: callout-note
## Crossed random effects
This type of variance-covariance structure in `nlme::lme()` is represented by a `pdBlocked` object with `pdIdent` elements.
:::
::::

### Check Model Assumptions

Let's evaluate the assumptions of linear mixed models by looking at the residuals and normality of error terms.

::: panel-tabset
#### lme4
```{r, fig.height=6, fig.width=8}
check_model(model_lmer,  check = c('qq', 'linearity', 'reqq'), detrend=FALSE, alpha =0)
```

#### nlme
```{r, layout="[[1,1], [1]]"}
plot(model_lme, resid(., scaled=TRUE) ~ fitted(.), 
     xlab = "fitted values", ylab = "studentized residuals")

qqnorm(residuals(model_lme))
qqline(residuals(model_lme))
```
:::

The residuals fit the assumptions of the model well.

### Inference

We can evaluate the model for the analysis of variance, for main and interaction effects.

::: panel-tabset
### lme4
```{r}
car::Anova(model_lmer, type = "III")
```

### nlme
```{r}
anova(model_lme, type = "marginal")
```
:::

Analysis of variance showed a significant interaction impact of gen and nitro on rice grain yield.

Next, We can estimate marginal means for nitro and gen interaction effects using the **emmeans** package.

::: panel-tabset
### lme4
```{r}
emm1 <- emmeans(model_lmer, ~ nitro*gen) 
emm1
```

### nlme
```{r}
emm1 <- emmeans(model_lme, ~ nitro*gen)
emm1
```
:::

Note that, confidence intervals were not estimated through `emmeans()` from `lme()` model.

::: callout-note
## `lme vs lmer`

For strip plot experiment design, fitting nested and crossed random effects is more complicated through **nlme**. Therefore, it's more convenient to use **lme4** in this case as both models yielded same results in the example shown above.
:::
