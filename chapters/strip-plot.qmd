# Strip Plot Design

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

In strip plot design each block or replication is divided into number of vertical and horizontal strips depending on the levels of the respective factors. 1. Vertical strip plot for the first factor – vertical factor 2. Horizontal strip plot for the second factor – horizontal factor

Divide the experimental area into 'A' horizontal strips and 'B' vertical strips. Each level of factor A is assigned to all the plots in one row, and each level of factor B is assigned to all the plots in one column.

The statistical model:

$$y_{ijk} = \mu + \alpha_j + \beta_k + \alpha_j\beta_k + b_i + r_{ij} + c_{ik} + \epsilon_{ijk}$$ Where:

$\mu$= overall experimental mean, $\alpha$ and $\beta$ are the main effects applied in a horizontal and vertical direction, and $\alpha$$\beta$ represents the interaction between main factors. The random effects in above equation are $b_i$, the random rep effect, $r_{ij}$, the row within rep random effect, $c_{ik}$, the column within rep random effect.

$$ b_i \sim N(0, \sigma_1^2)$$

$$ r_{ij}  \sim N(0, \sigma_2^2)$$

$$ c_{ik} \sim N(0, \sigma_3^2)$$

$$ \epsilon_{ijk} \sim N(0, \sigma^2)$$\

## Example Analysis

We will start by loading the required libraries for this analysis for `lme` and `lmer` models, respectively.

::: panel-tabset
### lme4

```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance); library(desplot)
library(broom.mixed)
```

### nlme

```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr); library(desplot); library(broom.mixed)
```
:::

For this example, we will use Rice strip-plot experiment data from the`agridat` package. A strip-plot experiment with three reps, variety as the horizontal strip and nitrogen fertilizer as the vertical strip.

```{r}
data1 <- agridat::gomez.stripplot
```

|       |                              |
|-------|------------------------------|
| rep   | replication unit             |
| nitro | nitrogen fertilizer in kg/ha |
| gen   | rice variety                 |
| row   | row (represents gen)         |
| col   | column (represents nitro)    |
| yield | grain yield in kg/ha         |

: Table of variables in the data set {tbl-strip_plot}

For the sake of analysis, 'row' and 'col' variables are used to represent 'nitrogen' and 'Gen' factors. The plot below shows the application of treatments in horizontal and vertical direction in a strip plot design.

```{r, echo=FALSE}
desplot(data1, gen ~ col*row,
        # aspect unknown
        out1=rep, out2=nitro, num=nitro, cex=1,
        main="Strip Plot Design")
```

### Data integrity checks

First thing we need to verify is the data types of the variables in data1. The 'rep', 'nitro', and 'gen' needs to be a factor/character variables and 'yield' should be numeric.

```{r}
str(data1)
```

Let's convert 'nitro' from numeric to factor.

```{r}
data1$nitro <- as.factor(data1$nitro)
```

Let's have a look at the balance of treatment factors by running a a cross tabulation, and it looks well balanced.

```{r}
table(data1$gen, data1$nitro)
```

```{r}
apply(data1, 2, function(x) sum(is.na(x)))
```

We don't have any missing values in this data set.

Lastly, let's check the dependent variable by plotting.
```{r, eval=FALSE}
hist(data1$yield, main = "", xlab = "yield")
```
```{r, echo=FALSE}
#| label: fig-strip_plot_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(data1$yield, main = "", xlab = "yield", cex.lab = 1.8, cex.axis = 1.5)
```
No extreme values or skewness is present in the yield values.

### Model Building
The impact of nitro, gen, and their interaction was evaluated on rice yield. The rep, gen nested in rep, and nitro nested in rep were random effects in the model.

https://stackoverflow.com/questions/36643713/how-to-specify-correlated-crossed-random-effects-in-nlme 

::: panel-tabset
#### lme4

```{r}
model_lmer <- lmer(yield ~  nitro*gen +  (1|rep) + 
                   (1|rep:gen) + (1|rep:nitro), 
                   data = data1)
tidy(model_lmer)
```

#### nlme

```{r}

model_lme <-lme(yield ~  nitro*gen,
                random = list(one = pdBlocked(list(
        pdIdent(~ 0 + rep), 
         pdIdent(~ 0 + rep:gen), 
        pdIdent(~ 0 + rep:nitro)))),
        data = data1 %>% mutate(one = factor(1)))

summary(model_lme)
#tidy(model_lme)
```
:::

### Check Model Assumptions

::: panel-tabset
#### lme4

```{r, fig.height=3}
check_model(model_lmer, check = c('normality', 'linearity'))
```

#### nlme

```{r, layout="[[1,1], [1]]"}
plot(model_lme, resid(., scaled=TRUE) ~ fitted(.), 
     xlab = "fitted values", ylab = "studentized residuals")

qqnorm(residuals(model_lme))
qqline(residuals(model_lme))
```
:::

The residuals fit the assumptions of the model well.

### Inference
We can evaluate the model for the analysis of variance, for main and interaction effects.

::: panel-tabset
### lme4
```{r}
car::Anova(model_lmer, type = "III", test.statistics = "F")
```

### nlme
```{r}
anova(model_lme, type = "marginal")
```
:::
Analysis of variance showed a significant interaction impact of gen and nitro on rice grain yield.

Next, We estimate marginal means for nitro and gen interaction effects using `emmeans` package.

::: panel-tabset
### lme4

```{r}
emm1 <- emmeans(model_lmer, ~ nitro*gen) 
emm1
```

### nlme

```{r}
emm1 <- emmeans(model_lme, ~ nitro*gen)
emm1
```
:::

Note that, confidence intervals were not estimated through emmeans from lme model. 

::: callout-note
## `lme vs lmer`
For strip plot experiment deisgn, fitting nested and crossed random effects is more complicated through nlme. Therefore, it's more convinent to use lmer in this case as both models yielded same results in the example shown above.
:::

