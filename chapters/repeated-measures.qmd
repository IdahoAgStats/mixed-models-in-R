# Repeated measures mixed models

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))
```

In the previous chapters we have covered how to run linear mixed models for different experiment designs. All of the examples in those chapters were independent measure designs, where each subject was assigned to a different treatment. Now we will move on to experiment with repeated measures effects.

Studies that involve repeated observations of the exact same experimental units (or subjects) requires a repeated measures component in analysis to properly model correlations across time for each subject. This is common in studies that are evaluated across different time periods. For example, if samples are collected over the different time periods from same subject, we have to model the repeated measures effect while analyzing the main effects.

In these models, the 'iid' assumption (independently and identically distributed) is being violated often, so we need to introduce specialized covariance structures that can account for these correlations between error terms.

Fitting models with correlated observations requires new libraries including **mmrm** and **nlme**. The **lme4** package allows random effects only. In this chapter, we will analyze the data with repeated measures from different experiment designs including randomized complete block design, split plot, and split-split plot design.

There are several types of covariance structures:

| Structure name | nlme function | mmrm function | Assumption |
|------------------------|------------------------|------------------------|
| Autoregressive (AR1) | `corAR1()` | `ar1`  | observations which are more proximate are more correlated than measures that are more distant |
| Compound symmetry | `corCompSymm()` |   | Correlation is equal for all time gaps between observations |
| Unstructured | `CorSymm()` |    | Correlations are different for the various time gaps |

::: column-margin
To read more about selecting appropriate covariance structure based on your data, please refer to this [link](https://www.ars.usda.gov/ARSUserFiles/80000000/StatisticsGroupWebinars/Appendix%20E%20-%20Selecting%20a%20Covariance%20Structure.pdf).
:::

The repeated measures syntax in **nlme** follow this convention: 

`corr = corAR1(value = 0, form = ~ t|g, fixed = FALSE)`. 

The argument for 'value' is the starting value for iterations (zero, unless you specify something else), and if `fixed = FALSE` (the current nlme default), this value will be allowed to change during the model fitting process. The argument structure for `form`, `~ t` or `~ t|g`, specifying a time covariate $t$ and, optionally a grouping factor g (if a group factor is not specified, the observation order will be used). When we use `~t|g` form, the correlation structure is assumed to apply only to observations within the same grouping level. The covariate for this correlation structure must be a integer value. `corCompSymm()` and `corSymm()` follow the same argument syntax. 

There are other covariance structures (e.g. `corARMA()`, `corCAR1()`), but we have found that `corAR1()` and `corCompSymm()` work for most circumstances. Type `??cor` in an R console for more options and details on the syntax

For examples used in this chapter we will fitting model using `mmrm` and `lme` packages. So, let's start with loading the required libraries for this analysis.

::: panel-tabset
### nlme
```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr); library(broom.mixed); library(ggplot2)
```

### mmrm
```{r, message=FALSE, warning=FALSE}
library(mmrm); library(performance); library(emmeans)
library(dplyr); library(broom.mixed); library(ggplot2)
```
:::

# Example Analysis

First, we will start with the first example from a randomized complete block design with repeated measures. 

## RCBD Repeated Measures

The example shown below contains data from a sorghum trial laid out as a randomized complete block design (5 blocks) with variety (4 varieties) treatment effect. The response variable 'y' is the leaf area index assessed in five consecutive weeks on each plot.

We need to have time as numeric and factor variable. In the model, to assess the week effect, week was used as a factor (factweek). For the correlation matrix, week needs to be numeric (week).

```{r}
dat <- agriTutorial::sorghum %>%   
  mutate(week = as.numeric(factweek),
         block = as.character(varblock)) 
```

|           |                                     |
|-----------|-------------------------------------|
| block     | blocking unit                       |
| Replicate | replication unit                    |
| Week      | Time points when data was collected |
| variety   | treatment factor, 4 levels          |
| y         | leaf area index                        |

: Table of variables in the data set {tbl-rcbd-rp}

### Data Integrity Checks

Let's do preliminary data check including evaluating data structure, distribution of treatments, number of missing values, and distribution of response variable.

```{r}
str(dat)
```

In this data, we have block, factplot, factweek as factor variables and y & week as numeric.

```{r}
table(dat$variety, dat$block)
```

The cross tabulation shows a equal number of variety treatments in each block.

```{r}
ggplot(data = dat, aes(y = y, x = factweek, fill = variety)) +
  geom_boxplot() +  
  #scale_fill_brewer(palette="Dark2") +
  scale_fill_viridis_d(option = "F") +
    theme_bw()
```

Looks like variety '1' has the lowest yield and showed drastic reduction in yield over weeks compared to other varieties.
One last step before we fit model is to look at the distribution of response variable.

```{r, eval=FALSE}
hist(dat$y, main = "", xlab = "leaf area index")
```

```{r, echo=FALSE}
#| label: fig-rcbd_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(dat$y, main = "", xlab = "leaf area index", cex.lab = 1.8, cex.axis = 1.5)
```

### Model Building

Let's fit the basic model first using `lme()` from the **nlme** package.

```{r}
lm1 <- lme(y ~ variety + factweek + variety:factweek,
           random = ~1|block/factplot,
           data = dat,
           na.action = na.exclude)
```

The model fitted above doesn't account for the repeated measures effect. To account for the variation caused by repeated measurements, we can model the correlation among responses for a given subject which is plot (factor variable) in this case.

By adding this correlation structure, we are accounting for variation caused by repeated measurements over weeks for each plot. The AR1 structure assumes that data points collected more proximate are more correlated. Whereas, the compound symmetry structure assumes that correlation is equal for all time gaps. Here, we will fit model with both correlation structures and compare models to find out the best fit model.

In this analysis, time variable is `week` and it must be numeric.

```{r}
cs1 <- corAR1(form = ~ week|block/factplot,  value = 0.2, fixed = FALSE)
cs2 <- corCompSymm(form = ~ week|block/factplot,  value = 0.2, fixed = FALSE)
```

In the code chunk above, we fitted two correlation structures including AR1 and compound symmetry matrices. Next we will update the model lm1, with these two matrices. 

```{r}
lm2 <- update(lm1, corr = cs1)
lm3 <- update(lm1, corr= cs2)
```

Now let's compare how model fitness differs among models with no correlation structure (lm1), with AR1 correlation structure (lm2), and with compound symmetry structure (lm3). We will compare these models by using `anova()` or by `compare_performance()` function from the **performance** library.

::: panel-tabset
### anova

```{r}
anova(lm1, lm2, lm3)
```

### performance

```{r}
result <- compare_performance(lm1, lm2, lm3)
print_md(result)
```
:::

We prefer to chose model with lower AIC and BIC values. In this scenario, we will move forward with lm2 model containing AR1 structure.

Let's run a `tidy()` on lm2 model to look at the estimates for random and fixed effects.

```{r}
tidy(lm2)
```

### Check Model Assumptions

```{r, fig.height=3}
#| message: false
#| warning: false
check_model(lm2, check = c('normality', 'linearity'))
```

### Inference

The ANOVA table suggests a significant effect of the variety, week, and variety x week interaction effect.

```{r}
anova(lm2, type = "marginal")
```

We can estimate the marginal means for variety and week effect and their interaction using `emmeans()` function.

```{r}
mean_1 <- emmeans(lm2, ~ variety)
mean_1

mean_2 <- emmeans(lm2, ~ variety*factweek)
mean_2
```

::: callout-tip
## Time variable

Here is a quick step to make sure your fitting model correctly: make sure to have two time variables in your data one being numeric (e.g. 'day' as number) and other being factor/character(e.g. 'day_factor' as a factor/character). Where, numeric variable is used for fitting correlation matrix and factor/character variable used in model statement to evaluate the time variable effect on response variable.
:::

## Split Plot Repeated Measures

Recall, we have evaluated split plot design [**Chapter 5**](split-plot-design.qmd). In this example we will use the same methodology used in Chapter 5 and update it with repeated measures component.

Next, let's load "Yield" data. It is located [here](https://raw.githubusercontent.com/IdahoAgStats/mixed-models-in-R/main/data/Yield.csv).

```{r}
Yield <- read.csv(here::here("data/Yield.csv"))
```

This example contains yield data in a split-plot design. The yield data was collected repeatedly from the same Reps over 5 Sample_times. In this data set, we have:

|             |                                 |
|-------------|---------------------------------|
| Rep         | replication unit                |
| Variety     | Main plot, 2 levels             |
| Fertilizer  | Split plot, 3 levels            |
| Yield       | crop yield                      |
| Sample_time | time points for data collection |

: Table of variables in the data set {tbl-split-plot-rp}

### Data Integrity Checks

Firstly, we need to look at the class of variables in the data set.

```{r}
str(Yield)
```
We will now convert the fertilizer and Rep into factor. In addition, we need to create a new factor variable (sample_time1) to analyze the time effect.

::: column-margin
For lme(), independent variables in a character/factor form works fine. But, for mmrm() independent variables must be a factor. Thus, for sake of consistancy, we will be using independent variables in factor class.
:::

```{r}
Yield$Variety <- factor(Yield$Variety) 
Yield$Fertilizer <- factor(Yield$Fertilizer) 
Yield$Sample_time1 <- factor(Yield$Sample_time) 
Yield$Rep <- factor(Yield$Rep)  
```


To fit model, we first need to convert Variety, Fertilizer, and Sample_time as factors. In addition, we need to create a variable for each subject which is plot in this case and contains a unique value for each plot. The plot variable is needed to model the variation in each plot over the sampling time. The plot will be used as a subject with repeated measures. The subject variable can be factor or numeric but the time (it could be year, or sample_time) has to be a factor.

```{r}
##creating a plot variable 
Yield$plot <- factor(paste(Yield$Rep, Yield$Fertilizer, Yield$Variety, sep='-')) 

table(Yield$plot) 
```

```{r}
table(Yield$Fertilizer, Yield$Variety) 
```
Looks like a well balanced design with 2 variety treatments and 3 fertilizer treatments.

Before fitting a model, let's check the distribution of the response variable.
```{r, echo=FALSE}
#| label: fig-split-plot_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(Yield$Yield, main = "", xlab = "yield", cex.lab = 1.8, cex.axis = 1.5)
```

```{r, eval=FALSE}
hist(Yield$Yield, xlab = "yield")
```
### Model fit

This data can be analyzed either using `nlme` or `mmrm`.

Let's say we want to fit a model using AR1 structure as shown in the RCBD repeated measures example. Previously, we used `lme()` from **nlme** package to fit the model. In this example, along with `nlme()` we will also `mmrm()` function from the **mmrm** package. In addition, instead of `summary()` function we will use `tidy()`  function from the **broom.mixed** package to look at estimates of mixed and random effects. This will generate a tidy workflow in particular by providing standardized verbs that provide information on estimates, standard errors, confidence intervals, etc.

::: panel-tabset
### nlme

```{r}
#| warning: false
corr_str1 = corAR1(form = ~ Sample_time|Rep/Variety/plot, value = 0.2, fixed = FALSE)

fit1 <- lme(Yield ~ Sample_time1*Variety*Fertilizer,
                random = ~ 1|Rep/Variety/plot,
                corr= corr_str1,
                data = Yield, na.action= na.exclude)
tidy(fit1)
```

### mmrm

```{r}
fit2 <- mmrm(formula = Yield ~ Sample_time1*Variety*Fertilizer +  
             ar1(Sample_time1|Rep/plot),
             data = Yield)

tidy(fit2)
```
:::

### Model diagnostics

We will use `check_model()` from **performance** package to evaluate the model fitness of model fitted using nlme (mod1). However, the `mmrm()` model class doesn't work with performance package, so we will evaluate the model diagnostics by plotting the residuals using base R functions.

::: panel-tabset
### nlme

```{r, fig.height=3}
#| warning: false
#| message: false
check_model(fit1, check = c('normality', 'linearity'))
```

### mmrm
```{r eval=FALSE, echo=TRUE}
plot(residuals(fit2), xlab = "fitted values", ylab = "residuals")
qqnorm(residuals(fit2)); qqline(residuals(fit2))
```

::: {layout-ncol=2 .column-body}

```{r echo=FALSE}
par(mar=c(5.1, 5, 2.1, 2.1))
plot(residuals(fit2), xlab = "fitted values", ylab = "residuals",
     cex.lab = 1.8, cex.axis = 1.5); abline(0,0)
```

```{r echo=FALSE}
par(mar=c(5.1, 5, 2.1, 2.1))
qqvals <- qqnorm(residuals(fit2), plot.it=FALSE)
qqplot(qqvals$x, qqvals$y, xlab = "Theoretical Quantiles", ylab = "Sample Quantiles", cex.lab = 1.7, cex.axis = 1.5); qqline(residuals(fit2))
```
::: 

:::

These diagnostic plots look great! The linearity and homogeneity of variance plots show no trend. The normal Q-Q plots for the overall residuals and for the random effects fall on a straight line so we can be satisfied with that.

### Inference

::: panel-tabset
### nlme

```{r}
#| warning: false
#| message: false
anova(fit1, type = "marginal")
```

### mmrm

```{r}
car::Anova(fit2, type = "III")
```
:::

The ANOVA showed a significant effect of Sample_time and Sample_time x Fertilizer interaction effect. 
 
Next, we can estimate marginal means and confidence intervals for the independent variables using `emmeans()`.

::: panel-tabset
### nlme

```{r}
emmeans(fit1,~ Sample_time1)
emmeans(fit1,~ Sample_time1|Fertilizer)

```

### mmrm

```{r}
emmeans(fit2,~ Sample_time1)
 emmeans(fit2,~ Sample_time1|Fertilizer)
```
:::

::: column-margin
To explore more about contrasts and emmeans please refer to [**Chapter 12**](means-and-contrasts.qmd).
:::

## Split-split plot repeated measures

Recall, we have evaluated the split-split experiment design in [**Chapter 5**](split-plot-design.qmd), where we had a one factor in main-plot, other in subplot and the third factor in sub-subplot. In this example we will be adding a repeated measures compoenet to the split-split plot design.

```{r}
phos <- read.csv(here::here("data", "split_split_repeated.csv"))
```

|             |                                 |
|-------------|---------------------------------|
| plot        | experimental unit                |
| block     | replication unit            |
| Ptrt  | Main plot, 2 levels           |
| Inoc       | Split plot, 2 levels         |
| Cv    | Split-split plot, 5 levels
| time | time points for data collection |
| P_leaf | leaf phosphorous content  |

### Data Integrity Checks

```{r}
str(phos)
```

```{r}
phos$time = as.factor(phos$time)
phos1 <- phos %>%   
  mutate(time1 = as.numeric(time),
        rep = as.character(bloc),
        plot = as.character(plot)) 
```


```{r}
table(phos1$Cv, phos1$Ptrt, phos1$Inoc) 
```
Looks like a well balanced design with 2 variety treatments and 3 fertilizer treatments.

Before fitting a model, let's check the distribution of the response variable.
```{r, echo=FALSE}
#| label: fig-split-split-plot_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(phos1$P_leaf, main = "", xlab = "P leaf", cex.lab = 1.8, cex.axis = 1.5)
```

```{r, echo=FALSE}
#| label: fig-split-split-plot_hist
#| fig-cap: "Boxplot of P concentration by stage"
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(phos1$P_leaf, main = "", xlab = "P leaf", cex.lab = 1.8, cex.axis = 1.5)
```

```{r, eval=FALSE, echo=FALSE}
hist(phos1$P_leaf, xlab = "P leaf")
boxplot(P_leaf ~ time, data = phos1)
```

::: callout-warning
## distribution of dependent variables

Here note that we observed uneven distribution of response variable with large number of observations in the range of 0-500. This will cause issues with assumptions of the linear mixed model. In such cases, It's recommended to check for data transformations such as log or square root transformation. For this cahpter, we will not try that here and rather focus on model structure only. 
:::

### Model fit

```{r}
#| warning: false

corr_str1 = corCompSymm(form = ~ time1|rep/Ptrt/Inoc/plot, value = 0.2, fixed = FALSE)

fit1 <- lme(P_leaf ~ time*Ptrt*Inoc*Cv,
                random = ~ 1|rep/Ptrt/Inoc/plot,
                corr = corr_str1,
                data = phos1, na.action= na.exclude)

```
### Inference

```{r, fig.height=3}
#| warning: false
#| message: false
check_model(fit1, check = c('qq', 'linearity'), detrend=FALSE)
```



```{r}
fit1_b <- update(fit1, weights = varIdent(form = ~1|time))
```

```{r, fig.height=3}
#| warning: false
#| message: false
check_model(fit1_b, check = c('qq', 'linearity'), line_size = 0, detrend=FALSE)
```
```{r}
plot(fit1_b)
```



```{r}
#| warning: false
#| message: false
anova(fit1, type = "marginal")
```


```{r}
emmeans(fit1_b, ~ Inoc|Cv)
emmeans(fit1_b, ~ time|Cv)
```

The biggest advantage of mixed models is their incredible flexibility. They handle clustered individuals as well as repeated measures (even in the same model). They handle [crossed](https://www.theanalysisfactor.com/multilevel-models-with-crossed-random-effects/) as well as nested random factors.

The biggest disadvantage of mixed models, at least for someone new to them, is their incredible flexibility. It’s easy to mis-specify a mixed model, and this is a place where a little knowledge is definitely dangerous.

::: callout-warning
## Model inference
Please remember that conclusions cannot be drawn from the model that doesn't meet linear mixed model assumptions. 
:::
