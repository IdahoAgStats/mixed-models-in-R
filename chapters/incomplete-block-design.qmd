---
title: "Incomplete Block Design"
---

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

The block design in [**Chapter 4**](rcbd.qmd) was complete, meaning that every block contained all the treatments. In practice, it may not be possible to have too many treatments in each block. Sometimes, there are also situations where it is advised to not have many treatments in each block.

In such cases, incomplete block designs are used where we have to decide what subset of treatments to be used in an individual block. This will work well if we enough blocks. However, if we only have small number of blocks, there would be the risk that certain quantities are not estimable anymore.

To avoid having a disconnected design, a balanced incomplete block design can be used

The statistical model for balanced incomplete block design is:

$$y_{ij} = \mu + \alpha_i + \beta_j + \epsilon_{ij}$$ Where:

$\mu$ = overall experimental mean $\alpha$ = treatment effects (fixed) $\beta$ = block effects (random) $\epsilon$ = error terms

$$ \epsilon \sim N(0, \sigma)$$

$$ \beta \sim N(0, \sigma_b)$$ There are few key points that we need to keep in mind while designing incomplete block designs:

-   A drawback of this design is that block effect and treatment effects are confounded.

-   To eliminate of block effects, better compare treatments within a block.

-   No treatment should appear twice in any block as they contributes nothing no within block comparisons.

An [excellent description of incomplete block design](https://people.math.ethz.ch/~meier/teaching/anova/incomplete-block-designs.html) is provided in [*ANOVA and Mixed Models*](https://www.taylorfrancis.com/books/mono/10.1201/9781003146216/anova-mixed-models-lukas-meier) by Lukas Meier. 

::: callout-note
## A note

Because the blocks are incomplete, the Type I and Type III sums of squares will be different. That is, the missing treatments in each block represent missing observations (but not missing ‘at random’).
:::

## Example Analysis
We will demonstrate an example data set designed in a balanced incomplete block design. First, load the libraries required for analysis and estimation.

::: panel-tabset
### lme4

```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(broom.mixed); library(performance)
```
### nlme
```{r, message=FALSE, warning=FALSE}
library(nlme); library(broom.mixed); library(emmeans)
library(dplyr); library(performance)
```
:::

The data used for this example analysis was extracted from the `agridat` package. This example is comprised of soybean balanced incomplete block experiment.

```{r}
dat <- agridat::weiss.incblock

data1 <- agridat::burgueno.alpha
```
|       |                              |
|-------|------------------------------|
| block   | blocking unit             |
| gen   | genotype (variety) factor                |
| row   | row position for each plot        |
| col   | column position for each plot    |
| yield | grain yield in bu/ac         |

: Table of variables in the data set {tbl-incom_blk}

```{r, fig.height= 9, echo=FALSE}
 library(desplot)
 desplot(data1, yield~col*row,
          out1=rep, out2=block, # aspect unknown
          text=gen, cex=1,shorten="none",
          main='burgueno.alpha')


 
table(data1$gen, data1$block)
 
 
 
  desplot(data1, yield~col*row,
          text=gen, shorten='none', cex=.6, out1=block,
          aspect=252/96, # true aspect
          main="weiss.incblock")
```


### Data integrity checks

The first thing is to make sure the data is what we expect. There are two steps:

1.  make sure data are the expected data type
2.  check the extent of missing data
3.  inspect the independent variables and make sure the expected levels are present in the data
4.  inspect the dependent variable to ensure its distribution is following expectations

```{r}
str(dat)
```

These look okay with block and gen being factor variables and yield, row, and col being numeric variables.

Next, check the independent variables. Running a cross tabulations is often sufficient to ascertain this.
```{r}
dat$row <- as.factor(dat$row)
```

```{r}
table(dat$gen, dat$block)
```

There are 31 varieties and it is perfectly balanced, with exactly one observation per treatment per block.

Here is a quick check I run to count the number of missing data in each column.

```{r}
apply(dat, 2, function(x) sum(is.na(x)))
```

We observed no missing data!

Last, check the dependent variable. A histogram is often quite sufficient to accomplish this. This is designed to be a quick check, so no need to spend time making the plot look good.

```{r, eval=FALSE}
hist(dat$yield, main = "", xlab = "yield")
```

```{r, echo=FALSE}
#| label: fig-ibd_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(dat$yield, main = "", xlab = "yield", cex.lab = 1.8, cex.axis = 1.5)
```
This data set is ready for analysis!

### Model Building

::: panel-tabset
### lme4

```{r}

model_icbd1 <- lmer(yield ~ gen + (1|rep/block),
                   data = data1, 
                   na.action = na.exclude)
tidy(model_icbd)
```

```{r}
#model_icbd1 <- lmer(yield ~ gen + (1|block) +  (1|row:block),
#                   data = dat, 
#                   na.action = na.exclude)
#tidy(model_icbd1)
```
### nlme

```{r, eval=FALSE}
model_icbd2 <- lme(yield ~ gen,
                  random = ~ 1|rep/block,
                  data = data1, 
                  na.action = na.exclude)
tidy(model_icbd)
```
:::

### Check Model Assumptions

::: panel-tabset
#### lme4
```{r, fig.height=3}
check_model(model_icbd1, check = c('normality', 'linearity'))
```

#### nlme
```{r, layout="[[1,1], [1]]"}
check_model(model_icbd2, check = c('normality', 'linearity'))
```
:::


### Inference
```{r}
anova(model_icbd)
```

```{r}
emmeans(model_icbd, ~ gen)
```

