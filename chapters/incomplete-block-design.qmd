---
title: "Incomplete Block Design"
reference-location: margin
---

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))

par(mar=c(5.1, 6, 4.1, 2.1))
```

## Background

The block design described in [**Chapter 4**](rcbd.qmd) was complete, meaning that each block contained each treatment level at least once. In practice, it may not be possible or advisable to include all treatments in each block, either due to limitations in treatment availability (e.g. limited seed stocks) or the block size becomes too large to serve its original goals of controlling for spatial variation.  

In such cases, randomized incomplete block designs (IBD) can be used. Incomplete block designs break the experiment into many smaller incomplete blocks that are nested within standard RCBD-style blocks and assigns a subset of the treatment levels to each incomplete block. There are several different approaches [@yates_1936] for how to assign treatment levels to incomplete blocks and these designs impact the final statistical analysis (and if all treatments included in the experimental design are estimable). [^icbd-1] [^icbd-2]  An [excellent description of incomplete block design](https://people.math.ethz.ch/~meier/teaching/anova/incomplete-block-designs.html){.external target="_blank"} is provided in [*ANOVA and Mixed Models*](https://www.taylorfrancis.com/books/mono/10.1201/9781003146216/anova-mixed-models-lukas-meier){.external target="_blank"} by Lukas Meier.



Incomplete block designs are grouped into two groups: (1) balanced lattice designs; and (2) partially balanced (also commonly called alpha-lattice) designs. Balanced IBD designs have been previously called "lattice designs" [need refs], but we are not using that term to avoid confusion with alpha-lattice designs, a term that is commonly used. 

In alpha-lattice design, the blocks are grouped into complete replicates. These designs are also termed as "resolvable incomplete block designs" or "partially balanced incomplete block designs"  [@patterson_1976]. This design has been more commonly used instead of balanced IBD because of it's practicability, flexibility, and versatility. 


### Statistical Model

The statistical model for a balanced incomplete block design is:

$$y_{ij} = \mu + \alpha_i + \beta_j + \epsilon_{ij}$$ 

Where:

$\mu$ = overall experimental mean   
$\alpha$ = treatment effects (fixed)  
$\beta$ = block effects (random)   
$\epsilon$ = error terms  

$$ \epsilon \sim N(0, \sigma)$$

$$ \beta \sim N(0, \sigma_b)$$ 

There are few key points that we need to keep in mind while designing incomplete block experiments:

-   A drawback of this design is that block effect and treatment effects are confounded.
-   To remove the block effects, it is better compare treatments within a block.
-   No treatment should appear twice in any block as it contributes nothing to within block comparisons.

The balanced incomplete block designs are guided by strict principles and guidelines including: the number of treatments must be a perfect square (e.g. 25, 36, and so on), and number of replicates must be equal to number of blocks + 1. 

::: callout-note
## Note on Sums of Squares

Because the blocks are incomplete, the type I and type III sums of squares will be different even when there is no missing data from a trail. That is because the missing treatments in each block represent missing observations (even though they are not missing ‘at random’).
:::

## Examples Analyses

### Balanced Incomplete Block Design

We will demonstrate an example data set designed in a balanced incomplete block design. First, load the libraries required for analysis.

::: panel-tabset
### lme4

```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(broom.mixed); library(performance)
```
### nlme
```{r, message=FALSE, warning=FALSE}
library(nlme); library(broom.mixed); library(emmeans)
library(dplyr); library(performance)
```
:::

The data used for this example analysis was extracted from the **agridat** package. This example is comprised of soybean balanced incomplete block experiment.

```{r, eval=FALSE, echo=FALSE}
#save data from the package
incblock <- agridat::weiss.incblock
write.csv(incblock, here::here("data", "incblock.csv"))
```

```{r}
dat <- read.csv(here::here("data", "incblock.csv"))
```

|       |                              |
|-------|------------------------------|
| block   | blocking unit             |
| gen   | genotype (variety) factor                |
| row   | row position for each plot        |
| col   | column position for each plot    |
| yield | grain yield in bu/ac         |

: Table of variables in the data set {tbl-incom_blk}

```{r, fig.height= 9, echo=FALSE}
desplot::desplot(dat, 
        block ~ col+row, 
         text=gen, cex=1, out1=block,
        out2=gen, out2.gpar=list(col = "black", lwd = 1, lty = 1),
         main="Incomplete block design")
# desplot::desplot(dat, yield~col*row,
#           text=gen, shorten='none', cex=.6, out1=block,
#           aspect=252/96, # true aspect
#           main="weiss.incblock")
```

#### Data integrity checks

- Check structure of the data 

We will start inspecting the data set firstly by looking at the class of each variable:

```{r}
str(dat)
```

The variables we need for the model are block, gen, and yield. The block and gen are classified as factor variables and yield is numeric. Therefore, we do not need to change class of any of the required variables.

- Inspect the independent variables

Next, let's check the independent variables. We can look at this by running a cross tabulations among block and gen factors.

```{r}
agg_tbl <- dat %>% group_by(gen) %>% 
  summarise(total_count=n(),
            .groups = 'drop')
agg_tbl
```

```{r}
agg_df <- aggregate(dat$gen, by=list(dat$block), FUN=length)
agg_df
```


There are 31 varieties (levels of gen) and it is perfectly balanced, with exactly one observation per treatment per block.

- Check the extent of missing data

We can calculate the sum of missing values in variables in this data set to evaluate the extent of missing values in different variables: 

```{r}
colSums(is.na(dat))
```

No missing data!

- Inspect the dependent variable

Last, let's plot a histogram of the dependent variable. This is a quick check before analysis to see if there is any strong deviation in values.
```{r, echo=FALSE}
#| label: fig-ibd_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(dat$yield, main = "", xlab = "yield", cex.lab = 1.8, cex.axis = 1.5, col = "turquoise")
```

```{r, eval=FALSE}
hist(dat$yield, main = "", xlab = "yield", col = "turquoise")
```
Response variable values fall within expected range, with few extreme values on right tail.
This data set is ready for analysis!

#### Model Building

We will be evaluating the response of yield as affected by gen (fixed effect) and block (random effect). ^[ Please note that incomplete block effect can be analyzed as a fixed (intra-block analysis) or a random (inter-block analysis) effect. When we consider block as a random effect, the mean values of a block also contain information about the treatment effects.]

::: panel-tabset
### lme4

```{r}
model_icbd <- lmer(yield ~ gen + (1|block),
                   data = dat, 
                   na.action = na.exclude)
tidy(model_icbd)
```

### nlme
```{r}
model_icbd1 <- lme(yield ~ gen,
                  random = ~ 1|block,
                  data = dat, 
                  na.action = na.exclude)
tidy(model_icbd1)
```
:::

#### Check Model Assumptions

Let's verify the assumption of linear mixed models including normal distribution and constant variance of residuals. 

::: panel-tabset
#### lme4
```{r, fig.height=3}
check_model(model_icbd, check = c('normality', 'linearity'))
```

#### nlme
```{r, fig.height=3}
check_model(model_icbd1, check = c('normality', 'linearity'))
```
:::

#### Inference

We can extract information about ANOVA using `anova()`.

::: panel-tabset
#### lme4
```{r}
anova(model_icbd, type = "1")
```

#### nlme
```{r}
anova(model_icbd1, type = "sequential")
```
:::

Let's look at the estimated marginal means of yield for each variety (gen).

::: panel-tabset
#### lme4
```{r}
emmeans(model_icbd, ~ gen)
```

#### nlme
```{r}
emmeans(model_icbd1, ~ gen)
```
:::


### Partially Balanced IBD (Alpha Lattice Design)

The statistical model for partially balanced design includes:

$$y_{ij(l)} = \mu + \alpha_i + \beta_{i(l)} + \tau_j + \epsilon_{ij(l)}$$ 

Where:

$\mu$ = overall experimental mean   
$\alpha$ = replicate effect (random)  
$\beta$ = incomplete block effect (random)  
$\tau$ = treatment effect (fixed)  
$\epsilon_{ij(l)}$ = intra-block residual  


The data used in this example is published in *Cyclic and Computer Generated Designs* [@john_cyclic]. The trial was laid out in an alpha lattice design. This trial data had 24 genotypes ("gen"), 6 incomplete blocks, each replicated 3 times. 

Let's start analyzing this example first by loading the required libraries for linear mixed models:

::: panel-tabset
### lme4
```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(broom.mixed); library(performance)
```

### nlme
```{r, message=FALSE, warning=FALSE}
library(nlme); library(broom.mixed); library(emmeans)
library(dplyr); library(performance)
```
:::

Let's import a data with partial balanced icomplete design. This data was obtained from the **agridat** package. 
```{r, eval=FALSE, echo=FALSE}
#save data from the package
partial_incblock <- agridat::john.alpha
write.csv(partial_incblock, here::here("data", "partial_incblock.csv"))
```

```{r}
data1 <- read.csv(here::here("data", "partial_incblock.csv"))
```
|       |                              |
|-------|------------------------------|
| block   | incomplete blocking unit             |
| gen   | genotype (variety) factor                |
| row   | row position for each plot        |
| col   | column position for each plot    |
| yield | grain yield in tonnes/ha         |

: Table of variables in the data set {tbl-incom_blk1}

```{r, echo=FALSE, fig.height=6, fig.width=8}
desplot::desplot(data = data1, flip = TRUE,
        form = block ~ col + row | rep,          # fill color per genotype, headers per replicate
        text = gen, cex = 0.7, shorten = "no", # show genotype names per plot
        out1 = rep,                            # lines between complete blocks/replicates
        out2 = block,  
        out2.gpar=list(col = "blue", lwd = 1, lty = 1),# lines between incomplete blocks
        main = "Alpha Lattice Design", show.key =T)   # formatting
```

#### Data integrity checks

- Check structure of the data

Let's look into the structure of the data first to verify the class of the variables.

```{r}
str(data1)
```
Here, rep, block and gen are character and yield as a integer. We can continue with this. 

- Inspect the independent variables

Next step is to evaluate the independent variables. First, check the number of treatments per replication (each treatment should be replicated 3 times). 

```{r}
agg_tbl <- data1 %>% group_by(gen) %>% 
  summarise(total_count=n(),
            .groups = 'drop')
agg_tbl
```

This looks balanced, as expected. Also, let's have a look at the number of times each treatment appear per block.

```{r}
agg_blk <- aggregate(data1$gen, by=list(data1$block), FUN=length)
agg_blk
```

12 treatments randomly appear in incomplete block. Each incomplete block has same number of treatments. 

- Check the extent of missing data

```{r}
colSums(is.na(data1))
```
No missing values in data!

- Inspect the dependent variable

Before fitting the model, it's a good idea to look at the distribution of dependent variable, yield.

```{r, echo=FALSE}
#| label: fig-alpha_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(data1$yield, main = "", xlab = "yield", cex.lab = 1.8, cex.axis = 1.5, col = "turquoise")
```
```{r, eval=FALSE}
hist(data1$yield, main = "", xlab = "yield", col = "turquoise")
```

The response variables seems to follow a normal distribution curve, with few values on extreme lower and higher ends. 

#### Model Building
We are evaluating the response of yield to Gen (fixed effect) and rep and block as a random effect.


::: panel-tabset
### lme4
```{r}
mod_alpha <- lmer(yield ~ gen + (1|rep/block),
                   data = data1, 
                   na.action = na.exclude)
tidy(mod_alpha)
```

### nlme
```{r}
mod_alpha1 <- lme(yield ~ gen,
                  random = ~ 1|rep/block,
                  data = data1, 
                  na.action = na.exclude)
tidy(mod_alpha1)
```
:::

#### Check Model Assumptions
Let's verify the assumption of linear mixed models including normal distribution and constant variance of residuals. 

::: panel-tabset
#### lme4
```{r, fig.height=3}
check_model(mod_alpha, check = c('normality', 'linearity'))
```
#### nlme
```{r, fig.height=3}
check_model(mod_alpha1, check = c('normality', 'linearity'))
```
:::

Here a little skewness is present normality of residuals, but that's not a major deviation in the model assumptions.

#### Inference

Let's look at the ANOVA table using `anova()` from lmer and lme models, respectively.

::: panel-tabset
#### lme4
```{r}
anova(mod_alpha, type = "1")
```

#### nlme
```{r}
anova(mod_alpha1, type = "sequential")
```
:::

Let's look at the estimated marginal means of yield for each variety (gen).

::: panel-tabset
#### lme4
```{r}
emmeans(mod_alpha, ~ gen)
```

#### nlme
```{r}
emmeans(mod_alpha1, ~ gen)
```
:::

