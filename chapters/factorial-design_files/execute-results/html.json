{
  "hash": "a922d70cdce20ac51b0d333ba492e5a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factorial Design\"\n---\n\n\n## Background\n\nFactorial design involves studying the impact of multiple factors simultaneously. Each factor can have multiple levels, and combinations of these levels form the experimental conditions. This design allows us to understand the main effects of individual factors and their interactions on the response variable. The statistical model for factorial design is:\n$$y_{ij} = \\mu +  \\tau_i+ \\beta_j + \\epsilon_{ij}$$ Where:\n$\\mu$ = experiment mean, $\\tau$ = effect of factor A, $\\beta$ = effect of factor B, and $\\tau\\beta$ = interaction effect of factor A and B.\n\nAssumptions of this model includes: independent and identically distributed error terms with a constant variance.\n\n\n## Example Analysis\nFirst step is to load the libraries required for the analysis:\n\n::: panel-tabset\n### lme4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4); library(lmerTest); library(emmeans)\nlibrary(dplyr); library(broom.mixed); library(performance)\n```\n:::\n\n\n### nlme\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nlme); library(broom.mixed); library(emmeans)\nlibrary(dplyr)\n```\n:::\n\n:::\nNext, we will load the data set named 'cochran.factorial' from the 'agridat' package. This data comprises a yield response of beans to different levels of manure (d), nitrogen (n), phosphorus The goal of this analysis is the estimate the effect on d, n, p, k, and their interactions on bean yield.\n\nWhile importing the data, d, n, p, and k were converted into factor variables using the `mutate()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(agridat)\n\ndata1 <- agridat::cochran.factorial %>% \n  mutate(d = as.factor(d),\n         n = as.factor(n),\n         p = as.factor(p),\n         k = as.factor(k))\n```\n:::\n\n### Data Integrity Checks\nVerify the class of variables, where rep, block, d, n, p, and k are supposed to be a factor/character and yield should be numeric/integer. \n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  8 variables:\n $ rep  : Factor w/ 2 levels \"R1\",\"R2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ block: Factor w/ 2 levels \"B1\",\"B2\": 1 1 1 1 1 1 1 1 2 2 ...\n $ trt  : Factor w/ 16 levels \"(1)\",\"d\",\"dk\",..: 15 10 2 14 5 6 9 11 8 12 ...\n $ yield: int  45 55 53 36 41 48 55 42 50 44 ...\n $ d    : Factor w/ 2 levels \"0\",\"1\": 2 2 1 2 1 1 1 2 1 2 ...\n $ n    : Factor w/ 2 levels \"0\",\"1\": 2 2 2 1 1 1 2 1 2 1 ...\n $ p    : Factor w/ 2 levels \"0\",\"1\": 1 2 2 1 2 1 1 2 1 2 ...\n $ k    : Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 1 2 1 2 2 1 ...\n```\n\n\n:::\n:::\n\nThis looks good.\n\nNext, inspect the independent variables and make sure the expected levels are present in the data.\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data1$d, data1$n, data1$p, data1$k)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, ,  = 0,  = 0\n\n   \n    0 1\n  0 2 2\n  1 2 2\n\n, ,  = 1,  = 0\n\n   \n    0 1\n  0 2 2\n  1 2 2\n\n, ,  = 0,  = 1\n\n   \n    0 1\n  0 2 2\n  1 2 2\n\n, ,  = 1,  = 1\n\n   \n    0 1\n  0 2 2\n  1 2 2\n```\n\n\n:::\n:::\n\nThe design looks well balanced.\n\nLast step is to inspect the dependent variable to ensure its distribution is following expectations\n\n::: {.cell .column-margin}\n::: {.cell-output-display}\n![Histogram of the dependent variable.](factorial-design_files/figure-html/fig-factorial_hist-1.png){#fig-factorial_hist width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(data1$yield)\n```\n:::\n\nThe range is roughly falling into the expected range. I don't see any extreme values (high or low) which might indicate issues with data.\n\n### Model fitting\n\nModel fitting with R is exactly the same as shown in previous chapters: we need to include all effect, as well as the interaction, which is represented by using the colon indicator ‘:’. Therefore, model syntax is:\n\n`yield ~ d + n + p + k + d:n + d:p + d:k + n:p + n:k + p:k + d:n:p:k`\n\nwhich can be abbreviated as:\n\n`yield ~ d*n*p*k`\n\n::: panel-tabset\n### lme4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lmer(yield ~ d*n*p*k + (1|block),\n                   data = data1, \n                   na.action = na.exclude)\ntidy(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 8\n   effect   group    term           estimate std.error statistic    df   p.value\n   <chr>    <chr>    <chr>             <dbl>     <dbl>     <dbl> <dbl>     <dbl>\n 1 fixed    <NA>     (Intercept)      49          3.70   13.2     16.0  4.91e-10\n 2 fixed    <NA>     d1               -9.5        5.24   -1.81    16.0  8.84e- 2\n 3 fixed    <NA>     n1                0.500      5.24    0.0955  16.0  9.25e- 1\n 4 fixed    <NA>     p1              -11.5        5.24   -2.20    16.0  4.31e- 2\n 5 fixed    <NA>     k1                1.00       5.24    0.191   16.0  8.51e- 1\n 6 fixed    <NA>     d1:n1            13.5        7.82    1.73    16.0  1.03e- 1\n 7 fixed    <NA>     d1:p1            15.5        7.82    1.98    16.0  6.49e- 2\n 8 fixed    <NA>     n1:p1             9.50       7.82    1.22    16.0  2.42e- 1\n 9 fixed    <NA>     d1:k1             4.00       7.82    0.512   16.0  6.16e- 1\n10 fixed    <NA>     n1:k1             0.500      7.82    0.0639  16.0  9.50e- 1\n11 fixed    <NA>     p1:k1             3.00       7.82    0.384   16.0  7.06e- 1\n12 fixed    <NA>     d1:n1:p1        -14.5       12.1    -1.19    16.0  2.50e- 1\n13 fixed    <NA>     d1:n1:k1        -17.0       12.1    -1.40    16.0  1.81e- 1\n14 fixed    <NA>     d1:p1:k1         -7.00      12.1    -0.576   16.0  5.72e- 1\n15 fixed    <NA>     n1:p1:k1         -4.50      12.1    -0.370   16.0  7.16e- 1\n16 fixed    <NA>     d1:n1:p1:k1      25.0       19.9     1.26    16.0  2.27e- 1\n17 ran_pars block    sd__(Intercep…    1.26      NA      NA       NA   NA       \n18 ran_pars Residual sd__Observati…    4.92      NA      NA       NA   NA       \n```\n\n\n:::\n:::\n\n### nlme\n\n::: {.cell}\n\n:::\n\n:::\n::: column-margin\n::: callout-note\nInstead of `summary()` function, we used `tidy()` function from 'broom.mixed' package to get a short summary output of the model.\n:::\n:::\n### Check Model Assumptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](factorial-design_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nThe linearity and homogeneity of variance plots show no trend. The normal Q-Q plots for the overall residuals and for the random effects all fall nearly on a straight line so we can be satisfied with that.\n### Inference\nWe can get an ANOVA table for the linear mixed model using the function `anova()`, which works for both `lmer()` and `lme()` models..\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nType III Analysis of Variance Table with Satterthwaite's method\n        Sum Sq Mean Sq NumDF DenDF F value   Pr(>F)   \nd         2.00    2.00     1    16  0.0825 0.777658   \nn       325.12  325.12     1    16 13.4072 0.002107 **\np         6.12    6.12     1    16  0.2526 0.622113   \nk         4.50    4.50     1    16  0.1856 0.672379   \nd:n      32.00   32.00     1    16  1.3196 0.267550   \nd:p     242.00  242.00     1    16  9.9794 0.006079 **\nn:p      78.12   78.12     1    16  3.2216 0.091583 . \nd:k       6.12    6.12     1    16  0.2526 0.622113   \nn:k      32.00   32.00     1    16  1.3196 0.267550   \np:k      24.50   24.50     1    16  1.0103 0.329789   \nd:n:p     2.00    2.00     1    16  0.0825 0.777658   \nd:n:k    10.13   10.13     1    16  0.4175 0.527334   \nd:p:k    15.13   15.13     1    16  0.6237 0.441219   \nn:p:k    32.00   32.00     1    16  1.3196 0.267550   \nd:n:p:k  38.26   38.26     1    16  1.5778 0.227113   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\nLet’s find estimates for some of the factors such as n, p, and n:k interaction. We will try the random intercept model first.\n\n::: {.cell}\n\n```{.r .cell-code}\nemmeans(model1, specs = ~ n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNOTE: Results may be misleading due to involvement in interactions\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n n emmean   SE df lower.CL upper.CL\n 0   43.8 1.52 37     40.7     46.8\n 1   50.1 1.52 37     47.0     53.2\n\nResults are averaged over the levels of: d, p, k \nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \n```\n\n\n:::\n\n```{.r .cell-code}\nemmeans(model1, specs = ~ p)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNOTE: Results may be misleading due to involvement in interactions\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n p emmean   SE df lower.CL upper.CL\n 0   47.4 1.52 37     44.3     50.5\n 1   46.5 1.52 37     43.4     49.6\n\nResults are averaged over the levels of: d, n, k \nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \n```\n\n\n:::\n\n```{.r .cell-code}\nemmeans(model1, specs = ~ n:k)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNOTE: Results may be misleading due to involvement in interactions\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n n k emmean   SE   df lower.CL upper.CL\n 0 0   42.4 1.95 25.4     38.4     46.4\n 1 0   50.8 1.95 25.4     46.7     54.8\n 0 1   45.1 1.95 25.4     41.1     49.1\n 1 1   49.5 1.95 25.4     45.5     53.5\n\nResults are averaged over the levels of: d, p \nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 <- emmeans(model1, specs = ~ n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNOTE: Results may be misleading due to involvement in interactions\n```\n\n\n:::\n\n```{.r .cell-code}\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n n emmean   SE df lower.CL upper.CL\n 0   43.8 1.52 37     40.7     46.8\n 1   50.1 1.52 37     47.0     53.2\n\nResults are averaged over the levels of: d, p, k \nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \n```\n\n\n:::\n\n```{.r .cell-code}\npairs(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n contrast estimate   SE df t.ratio p.value\n n0 - n1     -6.38 1.74 16  -3.662  0.0021\n\nResults are averaged over the levels of: d, p, k \nDegrees-of-freedom method: kenward-roger \n```\n\n\n:::\n:::\n\n\n2.  Unbalanced factorial design\n\n### *Data integrity\n",
    "supporting": [
      "factorial-design_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}