---
title: Randomized Complete Block Design
reference-location: margin
---


```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))
```

This is a simple model that can serve as a good entrance point to mixed models.

Randomized complete block design (RCBD) is very common design where experimental treatments are applied at random to experimental units within each block. The block can represent a spatial or temporal unit or even different technicians taking data. The blocks are intended to control for a nuisance source of variation, such as over time, spatial variance, changes in equipment or operators, or myriad other causes. They are a random effect where the actual blocks used in the study are a random sample of a distribution of other blocks.

## Background

The statistical model:

$$y_{ij} = \mu + \alpha_i + \beta_j + \epsilon_{ij}$$ Where:

$\mu$ = overall experimental mean $\alpha$ = treatment effects (fixed) $\beta$ = block effects (random) $\epsilon$ = error terms

$$ \epsilon \sim N(0, \sigma)$$

$$ \beta \sim N(0, \sigma_b)$$

Both the overall error and the block effects are assumed to be normally distributed with a mean of zero and standard deviations of $\sigma$ and $\sigma_B$, respectively.


## Example Analysis

First, load the libraries for analysis and estimation:

::: panel-tabset
### lme4

```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance)
```

### nlme

```{r, message=FALSE, warning=FALSE}
library(nlme); library(performance); library(emmeans)
library(dplyr)
```
:::


This data set is for a single wheat variety trial conducted in Aberdeen, Idaho in 2015. The trial includes 4 blocks and 42 different treatments (wheat varieties in this case). This experiment consists of a series of plots (the experimental unit) laid out in a rectangular grid in a farm field. The goal of this analysis is the estimate the yield of each variety and the determine the rankings of each variety for the variable.

```{r}
var_trial <- read.csv(here::here("data", "aberdeen2015.csv"))
```

|  |  |
|-------------------|-----------------------------------------------------|
| block | blocking unit |
| range | column position for each plot |
| row | row position for each plot |
| variety | crop variety (the treatment) being evaluated |
| stand_pct | percentage of the plot with actual plants growing in them |
| days_to_heading_julian | Julian days (starting January 1st) until plot "headed" (first spike emerged) |
| lodging | percentage of plants in the plot that fell down and hence could not be harvested |
| yield_bu_a | yield (bushels per acre) |

: Table of variables in the data set {tbl-rcbd}

There are several variables present that are not useful for this analysis. The only thing we are concerned about is **block**, **variety**, **yield_bu_a**, and **test_weight**.

### Data integrity checks

The first thing is to make sure the data is what we expect.We will the steps explained in [**Chapter 4**](model-flow.qmd). Here are the steps to verify our data:

- Check structure of the data

```{r}
str(var_trial)
```

These look okay except for block, which is currently coded as integer (numeric). We don't want run a regression of block, where block 2 has twice the effect of block 1, and so on. So, converting it to a character will fix that. It can also be converted to a factor, but character variables are a bit easier to work with, and ultimately, equivalent to factor conversion

```{r}
var_trial$block <- as.character(var_trial$block)
```

- Inspect the independent variables

Next, check the independent variables. Running a cross tabulations is often sufficient to ascertain this.

```{r}
table(var_trial$variety, var_trial$block)
```

There are 42 varieties and there appears to be no mis-spellings among them that might confuse R into thinking varieties are different when they are actually the same. R is sensitive to case and white space, which can make it easy to create near duplicate treatments, such as "eltan" and "Eltan". There is no evidence of that in this data set. Additionally, it is perfectly balanced, with exactly one observation per treatment per rep. Please note that this does not tell us anything about the extent of missing data.

- Check the extent of missing data 

Here is a quick check to count the number of missing data in each column. 

```{r}
colSums(is.na(var_trial))
```

Alas, no missing data!

- Inspect the dependent variable

Last, check the dependent variable by creating a histogram.

```{r, echo=FALSE}
#| label: fig-rcbd_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(var_trial$yield_bu_a, main = NA, xlab = "yield", cex.lab = cex_lab, cex.axis = cex_axis, col = base_plot_color)
```

```{r, eval=FALSE}
hist(var_trial$yield_bu_a, main = NA, xlab = "yield")
```

The range is roughly falling into the range we expect. We (the authors) know this from talking with the person who generated the data, not through our own intuition. There are no large spikes of points at a single value (indicating something odd), nor are there any extreme values (low or high) that might indicate problems.


This data set is ready for analysis!

### Model Building

::: column-margin
Recall the model:

$$y_{ij} = \mu + \alpha_i + \beta_j + \epsilon_{ij}$$

For this model, $\alpha_i$ is the variety effect (fixed) and $\beta_j$ is the block effect (random).
:::

Here is the R syntax for the RCBD statistical model:

::: panel-tabset
### lme4

```{r}
model_rcbd_lmer <- lmer(yield_bu_a ~ variety + (1|block),
                   data = var_trial, 
                   na.action = na.exclude)
```

### nlme

```{r}
model_rcbd_lme <- lme(yield_bu_a ~ variety,
                  random = ~ 1|block,
                  data = var_trial, 
                  na.action = na.exclude)
```
:::



### Check Model Assumptions

::: column-margin

::: callout-note
R syntax for checking model assumptions is the same for lme4 and nlme.
:::
:::

Remember those iid assumptions? Let's make sure we actually met them.

#### Original Method {#old-iid-checks}

We will start inspecting the model assumptions by for checking the homoscedasticity (constant variance) first using a `plot()` function in base R.

```{r, echo=FALSE}
#| label: fig-rcbd_error-1
#| fig-cap: "Plot of residuals versus fitted values"
#| column: margin
#| 
par(mar=c(5.1, 5, 2.1, 2.1))
plot(model_rcbd_lmer, resid(., scaled=TRUE) ~ fitted(.), 
     xlab = "fitted values", ylab = "studentized residuals",
     cex.lab = 1.8, cex.axis = 1.5)
```

```{r, eval=FALSE}
plot(model_rcbd_lmer, resid(., scaled=TRUE) ~ fitted(.), 
     xlab = "fitted values", ylab = "studentized residuals")
```

We have observed a random and uniform distribution of points. This looks good!

As explained in [**Chapter 4**](model-flow.qmd) we will first extract residuals using`resid()` and then generate a qq-plot and line.

```{r, echo=FALSE}
#| label: fig-rcbd_norm-1
#| fig-cap: "QQ-plot of residuals"
#| column: margin

par(mar=c(5.1, 5, 2.1, 2.1))
qqnorm(resid(model_rcbd_lmer), main = NULL, cex.lab = 1.8, cex.axis = 1.5); qqline(resid(model_rcbd_lmer))
```

```{r, eval=FALSE}
qqnorm(resid(model_rcbd_lmer), main = NULL); qqline(resid(model_rcbd_lmer))
```

This is reasonably good. Things do tend to fall apart at the tails a little, so this is not concerning.

#### New Method {#new-iid-checks}

Here, we will use the `check_model()` function from the **performance** package to look at the normality and linearity of the residuals. 

```{r, fig.height=3}
check_model(model_rcbd_lmer, check = c('normality', 'linearity'))
```

### Inference

::::: callout-note
::: column-margin
R syntax for estimating model marginal means is the same for lme4 and nlme.
:::
:::::

Estimates for each treatment level can be obtained with the **emmeans** package.

```{r}
rcbd_emm <- emmeans(model_rcbd_lmer, ~ variety)
as.data.frame(rcbd_emm) %>% arrange(desc(emmean))
```

This table indicates the estimated marginal means ("emmeans", sometimes called "least squares means"), the standard error ("SE") of those means, the degrees of freedom and the upper and lower bounds of the 95% confidence interval. As an additional step, the emmeans were sorted from largest to smallest.

At this point, the analysis goals have been met: we know the estimated means for each treatment and their rankings.

If you want to run ANOVA, it can be done quite easily. By default, sequential (type I) sums of squares is used by **nlme**, but partial (type 3) sums of squares is also possible. Containment is the only degrees of freedom calculation method enabled in **nlme**. The lmer-extender package **lmerTest* implements type 3 tests and the Kenward-Rogers method of degrees of freedom approximation by default.^[The Type I method is called “sequential” sum of squares because it adds terms to the model one at a time; while type 3 ("partial") drops model terms one at a time. This can effect the results of an F-test and p-value, but only when a data set is unbalanced across treatments, either due to design or missing data points.]


In this example, there is only one fixed effect, so the sums of squares choice is immaterial. 

::: panel-tabset
### lme4

```{r}
anova(model_rcbd_lmer, type = "1")
```

### nlme

```{r}
anova(model_rcbd_lme, type = "sequential")
```
:::


