---
title: "RCBD Design with Several Crossed Factors"
---

```{r, include=FALSE, echo=FALSE}
source(here::here("settings.r"))
```

## Background

Factorial design involves studying the impact of multiple factors simultaneously. Each factor can have multiple levels, and combinations of these levels form the experimental conditions. This design allows us to understand the main effects of individual factors and their interactions on the response variable. The statistical model for factorial design is:
$$y_{ij} = \mu +  \tau_i+ \beta_j + (\tau\beta)_{ij} + \epsilon_{ij}$$ 
Where: 

$\mu$ = experiment mean

$\tau$ = effect of factor A

$\beta$ = effect of factor B 

$\tau\beta$ = interaction effect of factor A and B.


Assumptions of this model includes: independent and identically distributed error terms with a constant variance $\sigma^2$.

## Example Analysis

First step is to load the libraries required for the analysis:

::: panel-tabset
### lme4

```{r, message=FALSE, warning=FALSE}
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(broom.mixed); library(performance)
```

### nlme

```{r, message=FALSE, warning=FALSE}
library(nlme); library(broom.mixed); library(emmeans)
library(dplyr); library(performance)
```
:::

The data used in this example analysis is from the **agridat** package (data set "yates.missing"). This data comprises a infection intensity (y) response of potato tubers to different levels of  nitrogen (n), phosphorus (p), potassium (k) treatments.

The objective of this example is evaluate the individual and interactive effect of  "n", "p", and "k" treatments on bean yield.

Note, while importing the data, d, n, p, and k were converted into factor variables using the `mutate()` function from **dplyr** package. This helps in reducing the extra steps of converting each single variable to factor manually.

```{r, eval=FALSE, echo=FALSE}
#save data from the package
factorial <- agridat::yates.missing
factorial <- factorial %>% select(-trt)
write.csv(factorial, here::here("data", "factorial.csv"), row.names = FALSE)
```

```{r warning=FALSE, message=FALSE}
data1 <- read.csv(here::here("data", "factorial.csv"))
```

|       |                                |
|-------|--------------------------------|
| block | blocking unit                  |
| n     | nitrogen treatment, 2 levels   |
| p     | phosphorus treatment, 2 levels  |
| k     | potassium treatment, 2 levels  |
| y | intensity of infection of potato tubers                    |

: Table of variables in the data set {tbl-factorial}

### Data Integrity Checks

- Check structure of the data 

First step is to Verify the class of variables, where rep, block, d, n, p, and k are supposed to be a factor/character and y should be numeric.

```{r}
str(data1)
```
In this data, treatment factors, 'n', 'p', & 'k' are integers, we need to convert these variables to factor.
```{r}
dat2 <- data1 |> mutate(n = as.factor(n),
               p = as.factor(p),
               k = as.factor(k))
```


- Inspect the independent variables

we are inspecting levels of independent variables to make sure the expected levels are present in the data.

```{r}
table(dat2$n, dat2$p, dat2$k)
```

The design looks well balanced.

- Check the extent of missing data

```{r}
colSums(is.na(dat2))

```

There are 9 missing values in this data set.
Let's look into those missing values

```{r}
dat2[is.na(dat2$y),]
```

These values are randomly missing in different blocks, and treatments. These are not from any specific block or treatment factor. There are different methods of handling with missing values, but for this chapter we will exclude these missing values using `na.action = exclude` option in model. 

- Inspect the dependent variable 

This is the last step is to inspect the dependent variable to ensure it looks as expected.

```{r, echo=FALSE}
#| label: fig-factorial_hist
#| fig-cap: "Histogram of the dependent variable."
#| column: margin
par(mar=c(5.1, 5, 2.1, 2.1))
hist(dat2$y, main = "", xlab = "Infection intensity", cex.lab = cex_lab, cex.axis = cex_axis, col = base_plot_color)
```

```{r, eval=FALSE}
hist(dat2$y, main = NA, xlab = "Infection intensity")
```

No extreme values are observed in the dependent variable, and the distribution looks as expected.  

### Model fitting

Model fitting with R is exactly the same as shown in previous chapters: we need to include all fixed effects, as well as the interaction, which is represented by using the colon indicator ‘:’. 

The model syntax is:

`yield ~  n + p + k + n:p + n:k + p:k + n:p:k`

which can be abbreviated as:

`yield ~ n*p*k`

In this analysis, "n", "p", & "k" are fixed factors and block is a random effect.

::: panel-tabset
### lme4

```{r, warning=FALSE}
model1_lmer <- lmer(y ~ n*p*k + (1|block),
                   data = dat2, 
                   na.action = na.exclude)
tidy(model1_lmer)
```

### nlme

```{r}
model2_lme <- lme(y ~ n*p*k,
              random = ~ 1|block,
              data = dat2, 
              na.action = na.exclude)
tidy(model2_lme)
```
:::

:::: column-margin
::: callout-note
The `tidy()` function from the **broom.mixed** package provides a short summary output of the model.
:::
::::

### Check Model Assumptions

::: panel-tabset
### lme4

```{r, fig.height=6, fig.width=8}
check_model(model1_lmer,  check = c('qq', 'linearity', 'reqq'), detrend=FALSE, alpha=0)
```

### nlme

```{r, fig.height=4, fig.width=7}
check_model(model2_lme,  check = c('qq', 'linearity'), detrend=FALSE, alpha=0)
```
:::

The linearity and homogeneity of variance plots show no trend. There are modest departures in the normality of residuals as indicated by the heavy tails. 


### Inference

We can obtain an ANOVA table for the linear mixed model using the function `anova()`, which works for both `lmer()` and `lme()` models.

::: panel-tabset
### lme4

```{r}
anova(model1_lmer, type = "3")
```
### nlme
```{r, fig.height=3}
anova(model2_lme, type = "marginal")
```
:::

Here we did not observe any difference in group variance of interaction effects. Among all treatment factors, only "p" had a significant effect on bean yield when evaluated at significance threshold of 0.05.


Let’s find estimates for some of the factors such as N, P and the N-by-K interactions in order to understand the combined effect of nitrogen and potassium on bean yield.

::: panel-tabset
### lme4
```{r}
emmeans(model1_lmer, specs = ~ n)
emmeans(model1_lmer, specs = ~ p)
emmeans(model1_lmer, specs = ~ n:p)
```

### nlme
```{r}
emmeans(model2_lme, specs = ~ n)
emmeans(model2_lme, specs = ~ p)
emmeans(model2_lme, specs = ~ n:p)
```
:::

The code above is calculating the estimated marginal means for main effects of "n" and "p" and their interaction (n:p) effect on infection intensity in potato tubers. Make sure to pay attention to the warning message that means are averaged over the "k" levels. It's an important detail to take into account when conducting inference and making conclusions. When working with factorial designs, make sure to  interpret ANOVA and estimated marginal means for main and interaction effects with care.
